#!/bin/bash
# shebang is just to make syntax highlighting work in some tools
############## DESCRIPTION ####################
# Fzf config and some useful functions. Fzf is configured to use fd instead of
# find for faster searching and to ignore .gitignored and hidden files.
# Everything under COMMANDS is some form of an fzf wrapper that I find useful.
# Each of these functions has one or more aliases defined below them for
# convenience.
#
# The three `fzf_*_from_dir` commands all take an optional directory argument.
# If provided, they will search in that directory, otherwise they will search
# in the current working directory. They all also take an optional -H flag to
# include hidden files in the search space, as our fzf behavior is
# configured to ignore hidden files and .gitignored files by default.
# - fzf_from_dir [-H] [dir]
#     Search for a file print the selected file to stdout.
#     With no arguments, this is essentially equivalent to `fzf`.
#     Aliases:
#       - f [dir]: fzf_from_dir [dir]
#       - fa [dir]: fzf_from_dir -H [dir]
#           
# - fzf_edit_from_dir [-H] [dir]
#     Search for a file open the selected file in $EDITOR.
#     With no arguments, this is essentially equivalent to `$EDITOR $(fzf)`
#     except that it shows a preview of the file in the fzf window.
#     Aliases:
#       - fe [dir]: fzf_edit_from_dir [dir]
#       - fea [dir]: fzf_edit_from_dir -H [dir]
# - fzf_cd_from_dir [-H] [dir]
#     Search for a directory and cd to the selected directory.
#     Aliases:
#       - fcd [dir]: fzf_cd_from_dir [dir]
#       - fcda [dir]: fzf_cd_from_dir -H [dir]
#
# The `fzf_git_log` command is a wrapper around `git log` that uses fzf to allow
# fuzzy searching of the git log. It takes the same arguments as `git log`.
#  - fzf_git_log [args]
#       Search the git log with fzf. Displays a preview of the commit in the
#       fzf window and displays the logs in tree format. Relies on an git alias
#       `ll`. To create the alias, run:
#         git config --global alias.ll "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
#       Aliases:
#         - fgl [args]: fzf_git_log [args]
#
# Depending on how fzf was installed, you may need to edit the BASIC CONFIG
# section to enable fzf keybinds and fuzzy completion.
# 
# Much of this is adapted from Dennis B's blog post: 
#     https://bluz71.github.io/2018/11/26/fuzzy-finding-in-bash-with-fzf.html

############## DEPENDENCY CHECKS ##############
# if fzf is not installed, print a warning and return
if ! command -v fzf &> /dev/null && [ ! -f ~/.fzf.bash ]; then
    echo "fzf not installed. Install fzf to use fzf_config"
    return
fi

# if fd is not installed, print a warning and return
if ! command -v fd &> /dev/null; then
    echo "fd not installed. Install fd to use fzf_config"
    return
fi

############## BASIC CONFIG ###################
# enable fzf keybinds
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# use fd because it's faster and ignores .gitignored files
export FZF_DEFAULT_COMMAND='fd --type f --color=never'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d . --color=never'
export FZF_DEFAULT_OPTS='
    --height 60%
    --reverse
    --multi
    --bind ctrl-b:page-up,ctrl-f:page-down
'

############## HELPER FUNCTIONS ###############

# Echo the path provided or cwd if no path is provided. Return with error if
# provided path is not a directory.
cwd_or_dir() {
    # if $1 is not provided, echo cwd
    if [[ "$1" == "" ]]
    then
        echo .
    # if $1 is provided but is not a directory, exit with error
    elif [[ ! -d $1 ]]
    then
        echo "$1 is not a directory" >&2
        return 1
    # if $1 is provided and is a directory, echo it
    else
        echo $1
    fi
}

# echo a command to print the first 500 lines of a file. If bat is
# installed, use it to print the file, otherwise use head
get_preview_command() {
    if command -v bat &> /dev/null; then
        echo "bat --color=always --line-range :500 {}"
    else
        echo "head -n 500 {}"
    fi
}

# echo a header string for fzf.
# usage: get_header parent_dir [command]
get_header() {
    local parent_dir=$(realpath $1)
    local command=$2

    local header
    if [[ -n $command ]]; then
        header=$command": "
    fi
    header=$header"searching in "$parent_dir"/"
    echo $header
}

############## FZF COMMANDS ###################
# fzf_from_dir [-H] [dir]
# Run fzf on a list of files from $1 if provided, otherwise from cwd.
# options:
#   -H: include hidden files in search space
fzf_from_dir() {
    usage() {
        echo "usage: fzf_from_dir [-H] [dir]"
    }
    # parse options
    local hidden_opt=""
    local OPTIND opt
    while getopts ":H" opt; do
        case $opt in
            H)
                hidden_opt="--hidden"
                ;;
            \?)
                usage >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND -1))

    local dir
    dir=$(cwd_or_dir $1) || return 1
    fd . $dir | fzf --header="$(get_header $dir)"
}
alias f="fzf_from_dir"
alias fa="fzf_from_dir -H"

# fzf_edit_from_dir [-H] [dir]
# find a file to edit in $EDITOR from dir if provided, otherwise from cwd
# options:
#   -H: include hidden files in search space
fzf_edit_from_dir() {
    usage() {
        echo "usage: fzf_edit_from_dir [-H] [dir]"
    }
    # parse options
    local hidden_opt=""
    local OPTIND opt
    while getopts ":H" opt; do
        case $opt in
            H)
                hidden_opt="--hidden"
                ;;
            \?)
                usage >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND -1))


    local dir
    dir=$(cwd_or_dir $1) || return 1
    local preview=$(get_preview_command)
    local file=$(fd . $dir --type f $hidden_opt | fzf \
        --preview="$preview" \
        --header="$(get_header $dir 'edit')"
    )
    if [[ "$file" != "" ]]; then
        $EDITOR "$file"
    fi
}
alias fe="fzf_edit_from_dir"
alias fea="fzf_edit_from_dir -H"

# fzf_cd_from_dir [-H] [dir]
# find a directory to cd to from $1 if provided, otherwise from cwd
# options:
#  -H: include hidden directories in search space
fzf_cd_from_dir() {
    usage() {
        echo "usage: fzf_cd_from_dir [-H] [dir]"
    }
    # parse options
    local hidden_opt=""
    local OPTIND opt
    while getopts ":H" opt; do
        case $opt in
            H)
                hidden_opt="--hidden"
                ;;
            \?)
                usage >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND -1))

    local from_dir
    from_dir=$(cwd_or_dir $1) || return 1
    local dir=$(fd . $from_dir --type d $hidden_opt | \
        fzf \
            --preview="tree -C {} | head -n 100" \
            --header="$(get_header $from_dir 'cd')" \
            --no-multi
    )
    if [[ "$dir" != "" ]]; then
        cd "$dir"
    fi
}
alias fcd="fzf_cd_from_dir"
alias fcda="fzf_cd_from_dir -H"

# filterable git log.
# Note: to create the `ll` git alias, run:
#  git config --global alias.ll 'log --graph \
#      --format="%C(yellow)%h%C(red)%d%C(reset) - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)"'
fzf_git_log() {
    local selection=$(
      git ll --color=always "$@" | \
        fzf --no-multi --ansi --no-sort --no-height \
            --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                       xargs -I@ sh -c 'git show --color=always @'"
    )
    if [[ -n $selection ]]; then
        local commit=$(echo "$selection" | sed 's/^[* |]*//' | awk '{print $1}' | tr -d '\n')
        git show $commit
    fi
}
alias gll='fzf_git_log'
