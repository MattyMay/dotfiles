#!/bin/bash
# Colors
RESET=$(tput sgr0)
BOLD=$(tput bold)
BLUE=$(tput setaf 4)
GREY=$(tput setaf 244)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)

# echos branch name if in a repo, and returns length of branch name str
__git_branch() {
  BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/')
  if [ ! -z $BRANCH ]; then
    echo -n "$BRANCH"
    return ${#BRANCH}
  fi
  return 0
}

# returns len of git branch string
__git_branch_len() {
  BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/')
  if [ ! -z $BRANCH ]; then
    return ${#BRANCH}
  fi
  return 0
}

# echos ✗ if not clean
__git_changes() {
  BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/*\(.*\)/\1/')
    if [ ! -z $BRANCH ]; then
      if [ ! -z "$(git status --short)" ]; then
        echo " ✗"
      fi
    fi
}

# set host if remote
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    host="@"`hostname`
fi

# limit length of path + git branch in prompt
# arg1 should be '/w', arg2 should be max prompt length
function __shortpath {
    __git_branch_len
    len_git=$?
    len_prompt=${#1}
    len_host=${#host}
    total_len=$((len_prompt+len_git+len_host))
    if [[ $total_len -gt $2 ]]; then
        len=$2+3+$len_git+$len_host
        echo "..."${1: -$len}
    else
        echo $1
    fi
}

PS1="${host}"
PS1+="\[$BLUE$BOLD\]\$(__shortpath '\w' 40)" # working directory
PS1+="\[$YELLOW\]\$(__git_branch)" # git branch
PS1+="\[$RED\]\$(__git_changes)" # x if not clean
PS1+="\[$GREY\] >>> " # prompt
PS1+="\[$RESET\]" # reset colors
